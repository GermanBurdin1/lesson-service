import { Controller, Get, HttpException, HttpStatus, Post, Query, Req, Res } from '@nestjs/common';
import { WhiteboardService } from './whiteboard.service';
import { Request, Response } from 'express';

@Controller('lessons/whiteboard')
export class WhiteboardController {
	constructor(private readonly whiteboardService: WhiteboardService) {}

	/** –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å = —Å–æ–∑–¥–∞—ë—Ç –∫–æ–º–Ω–∞—Ç—É –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç roomUuid + roomToken */
	@Post('create-room')
	async createRoomWithToken() {
		try {
			const result = await this.whiteboardService.createRoom();
			return result;
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω–∞:', error);
			throw new HttpException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç–æ–∫–µ–Ω–∞', HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	/** –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ UUID */
	@Get('get-room-token')
	async getRoomToken(
		@Query('roomUuid') roomUuid: string,
		@Query('role') role: 'admin' | 'writer' | 'reader',
		@Query('lifespan') lifespan?: number,
	) {
		if (!roomUuid || !role) {
			return { error: 'roomUuid –∏ role –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' };
		}
		const token = await this.whiteboardService.generateRoomToken(roomUuid, role, lifespan);
		return { roomToken: token };
	}

	/** –ü—Ä–æ–∫—Å–∏ –¥–ª—è Agora API - –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤ */
	@Get('agora-proxy/*')
	async agoraProxy(@Req() req: Request, @Res() res: Response) {
		try {
			console.log('üîç –ü–û–õ–ù–´–ô URL –ó–ê–ü–†–û–°–ê:', req.url);
			console.log('üîç –ú–ï–¢–û–î:', req.method);
			console.log('üîç PATH:', req.path);
			console.log('üîç QUERY:', req.query);
			
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ agora-proxy
			const pathAfterProxy = req.url.replace('/lessons/whiteboard/agora-proxy', '');
			const agoraUrl = `https://api-us-sv.whiteboard.rtelink.com${pathAfterProxy}`;
			console.log('üîÑ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Agora:', agoraUrl);
			
			const response = await this.whiteboardService.proxyAgoraRequest(agoraUrl);
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
			res.header('Access-Control-Allow-Origin', '*');
			res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
			res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
			
			console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ Agora');
			return res.json(response);
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫ Agora:', error);
			console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
			throw new HttpException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫ Agora', HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
