import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { Lesson } from './lesson.entity';
import { Task } from './task.entity';
import { Question } from './question.entity';
import { LessonNotes } from './lesson-notes.entity';
import { HomeworkItem } from './homework-item.entity';
import { GroupClass } from './group-class.entity';
import { GroupClassStudent } from './group-class-student.entity';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { AuthClient } from '../auth/auth.client';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';
import { In, Between } from 'typeorm';
import { CreateGroupClassDto } from '../dto/create-group-class.dto';
import { AddStudentToClassDto } from '../dto/add-student-to-class.dto';

@Injectable()
export class LessonsService {
	private readonly logger = new Logger(LessonsService.name);

	constructor(
		@InjectRepository(Lesson)
		private lessonRepo: Repository<Lesson>,
		@InjectRepository(Task)
		private taskRepo: Repository<Task>,
		@InjectRepository(Question)
		private questionRepo: Repository<Question>,
		@InjectRepository(LessonNotes)
		private lessonNotesRepo: Repository<LessonNotes>,
		@InjectRepository(HomeworkItem)
		private homeworkRepo: Repository<HomeworkItem>,
		@InjectRepository(GroupClass)
		private groupClassRepo: Repository<GroupClass>,
		@InjectRepository(GroupClassStudent)
		private groupClassStudentRepo: Repository<GroupClassStudent>,
		private readonly amqp: AmqpConnection,
		private readonly authClient: AuthClient,
		private readonly httpService: HttpService,
	) { }

	// –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
	private validateUUID(id: string): boolean {
		const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
		return uuidRegex.test(id);
	}

	private validateUUIDs(...ids: string[]): boolean {
		return ids.every(id => this.validateUUID(id));
	}

	async bookLesson(studentId: string, teacherId: string, scheduledAt: Date) {
		// ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –£–†–û–ö–ê ====================
		console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId} –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId} –Ω–∞ –≤—Ä–µ–º—è ${scheduledAt}`);

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
		const now = new Date();
		if (scheduledAt <= now) {
			throw new Error('Impossible de r√©server un cr√©neau dans le pass√©');
		}

		await this.validateLessonTime(teacherId, studentId, scheduledAt);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ–¥–Ω–æ –≤—Ä–µ–º—è
		const existingStudentRequests = await this.lessonRepo.find({
			where: [
				{ studentId, scheduledAt, status: 'pending' },
				{ studentId, scheduledAt, status: 'confirmed' }
			]
		});

		if (existingStudentRequests.length > 0) {
			console.log(`‚ùå –°—Ç—É–¥–µ–Ω—Ç ${studentId} —É–∂–µ –∏–º–µ–µ—Ç –∑–∞—è–≤–∫—É/—É—Ä–æ–∫ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è`);
			throw new Error('Vous avez d√©j√† une demande ou un cours programm√© √† cette heure.');
		}

		console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);

		// ==================== –°–û–ó–î–ê–ù–ò–ï –£–†–û–ö–ê ====================
		const lesson = this.lessonRepo.create({
			studentId,
			teacherId,
			scheduledAt,
			status: 'pending',
		});

		const savedLesson = await this.lessonRepo.save(lesson);

		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞
		const student = await this.authClient.getUserInfo(studentId);
		const studentFullName = `${student.name ?? ''} ${student.surname ?? ''}`.trim();

		const date = scheduledAt.toLocaleDateString('fr-FR');
		const time = scheduledAt.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });

		const payload = {
			user_id: teacherId,
			title: `Nouvelle demande de r√©servation de ${studentFullName}`,
			message: `${studentFullName} souhaite r√©server un cours le ${date} √† ${time}.`,
			type: 'booking_request',
			metadata: {
				lessonId: savedLesson.id,
				studentId,
				scheduledAt,
				studentName: studentFullName,
			},
			status: 'pending',
		};

		console.log('üì§ [lesson-service] –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ lesson_created:', payload);

		// üü¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ golevelup
		await this.amqp.publish('lesson_exchange', 'lesson_created', payload);

		return savedLesson;
	}

	async respondToBooking(
		lessonId: string,
		accepted: boolean,
		reason?: string,
		proposeAlternative?: boolean,
		proposedTime?: string
	) {
		console.log(`üîî [START] R√©ponse √† la demande de le√ßon (ID=${lessonId})`);
		console.debug(`üì® Donn√©es: accepted=${accepted}, reason="${reason ?? 'N/A'}", proposeAlternative=${proposeAlternative}, proposedTime=${proposedTime}`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			console.error(`‚ùå Le√ßon introuvable: ${lessonId}`);
			throw new Error('Le√ßon introuvable');
		}

		if (proposeAlternative && proposedTime) {
			lesson.proposedByTeacherAt = new Date();
			lesson.proposedTime = new Date(proposedTime);
			lesson.status = 'pending';
			lesson.studentConfirmed = null;
			lesson.studentRefused = null;
			await this.lessonRepo.save(lesson);

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			const teacher = await this.authClient.getUserInfo(lesson.teacherId);
			const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();

			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.studentId,
				title: 'Le professeur propose un autre horaire',
				message: `Le professeur propose le ${lesson.proposedTime.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal',
				metadata: {
					lessonId: lesson.id,
					proposedTime: lesson.proposedTime,
					teacherId: lesson.teacherId,
					teacherName: teacherName
				},
				status: 'unread',
			});
			return { success: true, proposal: true };
		}

		lesson.status = accepted ? 'confirmed' : 'rejected';
		lesson.studentConfirmed = accepted;
		lesson.studentRefused = !accepted;
		await this.lessonRepo.save(lesson);

		// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
		try {
			console.log('[LessonService] –ò—â—É notificationId –ø–æ lessonId:', lessonId);
			const notifResp = await lastValueFrom(
				this.httpService.get(`http://localhost:3003/notifications/by-lesson/${lessonId}`)
			);
			const notification = notifResp.data;
			if (notification && notification.id) {
				console.log('[LessonService] –ù–∞–π–¥–µ–Ω notificationId:', notification.id, '‚Äî –æ–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...');
				await lastValueFrom(
					this.httpService.patch(
						`http://localhost:3003/notifications/${notification.id}`,
						{ status: accepted ? 'accepted' : 'rejected' }
					)
				);
				console.log('[LessonService] –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!');
			} else {
				console.warn('[LessonService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			}
		} catch (err) {
			console.error('[LessonService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
		}
		// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

		const teacher = await this.authClient.getUserInfo(lesson.teacherId);
		console.log('[respondToBooking] teacher from authClient:', teacher);
		const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
		console.log('[LessonsService]teacherName:', teacherName);
		const payload = {
			user_id: lesson.studentId,
			title: accepted ? 'Votre le√ßon a √©t√© confirm√©e !' : 'Votre demande a √©t√© refus√©e',
			message: accepted
				? `Le professeur a confirm√© votre le√ßon pr√©vue le ${lesson.scheduledAt.toLocaleString('fr-FR')}.`
				: `Le professeur a refus√© la le√ßon. Raison: ${reason ?? 'Non sp√©cifi√©e'}`,
			type: 'booking_response',
			metadata: {
				lessonId: lesson.id,
				teacherId: lesson.teacherId,
				teacherName,
				scheduledAt: lesson.scheduledAt,
				accepted,
			},
			status: 'unread',
		};

		console.debug('üì¶ Envoi du payload √† RabbitMQ:', JSON.stringify(payload, null, 2));
		await this.amqp.publish('lesson_exchange', 'lesson_response', payload);
		//console.log('üì§ Message publi√© sur lesson_exchange avec routingKey=lesson_response');

		return { success: true };
	}

	async studentRespondToProposal(
		lessonId: string,
		accepted: boolean,
		newSuggestedTime?: string
	) {
		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) throw new Error('Le√ßon introuvable');

		// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
		try {
			console.log('[studentRespondToProposal] –ò—â—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			const notifResp = await lastValueFrom(
				this.httpService.get(`http://localhost:3003/notifications/by-lesson/${lessonId}`)
			);
			const notification = notifResp.data;
			if (notification && notification.id) {
				console.log('[studentRespondToProposal] –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.id);
				// –û–±–Ω–æ–≤–ª—è–µ–º data —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å accepted/refused —Å—Ç–∞—Ç—É—Å–æ–º
				const updatedData = {
					...notification.data,
					accepted: accepted,
					refused: !accepted
				};
				await lastValueFrom(
					this.httpService.patch(
						`http://localhost:3003/notifications/${notification.id}`,
						{
							status: accepted ? 'accepted' : 'refused',
							data: updatedData
						}
					)
				);
				console.log('[studentRespondToProposal] –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!');
			} else {
				console.warn('[studentRespondToProposal] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			}
		} catch (err) {
			console.error('[studentRespondToProposal] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
		}
		// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
		const student = await this.authClient.getUserInfo(lesson.studentId);
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		if (accepted) {
			lesson.status = 'confirmed';
			lesson.studentConfirmed = true;
			lesson.studentRefused = false;
			await this.lessonRepo.save(lesson);

			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} a accept√© la proposition`,
				message: `${studentName} a accept√© la proposition pour le ${lesson.proposedTime?.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal_accepted',
				metadata: {
					lessonId: lesson.id,
					proposedTime: lesson.proposedTime,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, accepted: true };
		} else if (newSuggestedTime) {
			lesson.studentAlternativeTime = new Date(newSuggestedTime);
			lesson.studentConfirmed = false;
			lesson.studentRefused = true;
			await this.lessonRepo.save(lesson);

			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} propose un autre horaire`,
				message: `${studentName} propose le ${lesson.studentAlternativeTime.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal_counter',
				metadata: {
					lessonId: lesson.id,
					proposedTime: lesson.studentAlternativeTime,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, counter: true };
		} else {
			lesson.status = 'rejected';
			lesson.studentConfirmed = false;
			lesson.studentRefused = true;
			await this.lessonRepo.save(lesson);

			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} a refus√© la proposition`,
				message: `${studentName} a refus√© la proposition.`,
				type: 'booking_proposal_refused',
				metadata: {
					lessonId: lesson.id,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, refused: true };
		}
	}

	async getLessonsForUser(userId: string) {
		return this.lessonRepo.find({
			where: [{ teacherId: userId }, { studentId: userId }],
			order: { scheduledAt: 'ASC' }
		});
	}

	async getLessonsForStudent(studentId: string, status: 'confirmed') {
		const lessons = await this.lessonRepo.find({
			where: { studentId },
			order: { scheduledAt: 'ASC' }
		});
		console.log('[getLessonsForStudent] –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:', lessons.length, lessons);

		const withTeacherNames = await Promise.all(lessons.map(async (lesson) => {
			const teacher = await this.authClient.getUserInfo(lesson.teacherId);
			const base = {
				...lesson,
				teacherName: `${teacher.name} ${teacher.surname}`.trim(),
				teacherId: lesson.teacherId,
			};
			if (lesson.proposedTime && lesson.status === 'pending') {
				const proposal = {
					...base,
					proposedTime: lesson.proposedTime,
					studentConfirmed: lesson.studentConfirmed,
					studentRefused: lesson.studentRefused,
					isProposal: true
				};
				console.log('[getLessonsForStudent] Proposal lesson:', proposal);
				return proposal;
			}
			// console.log('[getLessonsForStudent] Regular lesson:', base);
			return base;
		}));

		if (status === 'confirmed') {
			const filtered = withTeacherNames.filter(l => l.status === 'confirmed');
			console.log('[getLessonsForStudent] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ confirmed:', filtered);
			return filtered;
		}
		console.log('[getLessonsForStudent] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ:', withTeacherNames);
		return withTeacherNames;
	}

	async getTeachersForStudent(studentId: string): Promise<any[]> {
		//console.log('[LessonsService] getTeachersForStudent called with studentId:', studentId);
		const lessons = await this.lessonRepo.find({
			where: [
				{ studentId, status: 'confirmed' },
				{ studentId, status: 'pending' }
			],
			order: { scheduledAt: 'ASC' }
		});
		//console.log('[LessonsService] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:', lessons);
		const uniqueTeacherIds = Array.from(new Set(lessons.map(l => l.teacherId)));
		//console.log('[LessonsService] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ teacherId:', uniqueTeacherIds);
		const teachers = await Promise.all(
			uniqueTeacherIds.map(async (teacherId) => {
				const teacher = await this.authClient.getTeacherFullProfile(teacherId);
				//console.log('[LessonsService] teacher full profile:', teacher);
				return {
					id: teacherId,
					name: `${teacher.user?.name ?? ''} ${teacher.user?.surname ?? ''}`.trim() || teacher.user?.email,
					photoUrl: teacher.photo_url || 'assets/default-avatar.png',
					specializations: teacher.specializations ?? [],
					price: teacher.price ?? 0,
					rating: teacher.rating ?? 0,
					experienceYears: teacher.experience_years ?? 0,
					reviewCount: teacher.review_count ?? 0,
					bio: teacher.bio ?? '',
					certificates: teacher.certificates ?? [],
				};
			})
		);
		//console.log('[LessonsService] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:', teachers);
		return teachers;
	}

	async getConfirmedStudentsForTeacher(teacherId: string): Promise<any[]> {
		this.devLog('[LESSON SERVICE] getConfirmedStudentsForTeacher called with teacherId:', teacherId);
		const lessons = await this.lessonRepo.find({
			where: {
				teacherId,
				status: In(['pending', 'confirmed', 'cancelled_by_student', 'cancelled_by_student_no_refund', 'in_progress', 'completed'])
			},
			order: { scheduledAt: 'ASC' }
		});
		this.devLog('[LESSON SERVICE] Found lessons:', lessons.length, lessons.map(l => ({ id: l.id, studentId: l.studentId, status: l.status, scheduledAt: l.scheduledAt })));
		
		const uniqueStudentIds = Array.from(new Set(lessons.map(l => l.studentId)));
		this.devLog('[LESSON SERVICE] Unique student IDs:', uniqueStudentIds);
		
		const students = await Promise.all(
			uniqueStudentIds.map(async (studentId) => {
				const student = await this.authClient.getUserInfo(studentId);
				const studentLessons = lessons.filter(l => l.studentId === studentId);
				const nextLesson = studentLessons.length > 0 ? studentLessons[0] : null;
				this.devLog(`[LESSON SERVICE] Student ${studentId}:`, { name: student.name, lessonsCount: studentLessons.length, nextLesson: nextLesson?.scheduledAt });
				return {
					id: studentId,
					name: `${student.name ?? ''} ${student.surname ?? ''}`.trim(),
					photoUrl: student.photo_url || undefined,
					isStudent: true,
					nextLessonDate: nextLesson ? nextLesson.scheduledAt : null,
					// goals, homework, history, message ‚Äî –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è
				};
			})
		);
		this.devLog('[LESSON SERVICE] getConfirmedStudentsForTeacher result:', students);
		return students;
	}

	async getAllConfirmedLessonsForTeacher(teacherId: string) {
		// –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
		if (!this.validateUUID(teacherId)) {
			console.error(`‚ùå Invalid teacherId UUID format: ${teacherId}`);
			throw new Error('Invalid teacher ID format');
		}

		const lessons = await this.lessonRepo.find({
			where: {
				teacherId,
				status: In(['confirmed', 'cancelled_by_student', 'cancelled_by_student_no_refund', 'in_progress', 'completed'])
			},
			order: { scheduledAt: 'ASC' }
		});
		// –î–æ–±–∞–≤–∏–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–Ω—è—Ç–∏—é
		return Promise.all(lessons.map(async (lesson) => {
			const student = await this.authClient.getUserInfo(lesson.studentId);
			return {
				...lesson,
				studentName: `${student.name ?? ''} ${student.surname ?? ''}`.trim(),
			};
		}));
	}

	async getLessonById(lessonId: string) {
		// –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
		if (!this.validateUUID(lessonId)) {
			console.error(`‚ùå Invalid lessonId UUID format: ${lessonId}`);
			throw new Error('Invalid lesson ID format');
		}

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏ —Å—Ç—É–¥–µ–Ω—Ç–µ
		const [teacher, student] = await Promise.all([
			this.authClient.getUserInfo(lesson.teacherId),
			this.authClient.getUserInfo(lesson.studentId)
		]);

		const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		return {
			...lesson,
			teacherName,
			studentName
		};
	}

	async cancelLessonByStudent(lessonId: string, reason: string) {
		console.log(`üö´ [START] –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º (ID=${lessonId})`);
		console.debug(`üì® –î–∞–Ω–Ω—ã–µ: reason="${reason}"`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			console.error(`‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${lessonId}`);
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'confirmed') {
			console.error(`‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${lesson.status}`);
			throw new Error('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞
		const now = new Date();
		const twoHoursBeforeLesson = new Date(lesson.scheduledAt.getTime() - 2 * 60 * 60 * 1000);
		const isWithinTwoHours = now > twoHoursBeforeLesson;

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã
		const cancellationStatus = isWithinTwoHours ? 'cancelled_by_student_no_refund' : 'cancelled_by_student';

		// –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
		lesson.status = cancellationStatus;
		lesson.cancelledAt = now;
		lesson.cancellationReason = reason;
		await this.lessonRepo.save(lesson);

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
		const student = await this.authClient.getUserInfo(lesson.studentId);
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
		const refundText = isWithinTwoHours ? ' (pas de remboursement)' : ' (remboursement pr√©vu)';
		const payload = {
			user_id: lesson.teacherId,
			title: `${studentName} a annul√© le cours`,
			message: `${studentName} a annul√© le cours pr√©vu le ${lesson.scheduledAt.toLocaleString('fr-FR')}. Raison: ${reason}${refundText}`,
			type: 'lesson_cancelled_by_student',
			metadata: {
				lessonId: lesson.id,
				studentId: lesson.studentId,
				studentName,
				scheduledAt: lesson.scheduledAt,
				reason,
				refundAvailable: !isWithinTwoHours
			},
			status: 'unread',
		};

		console.debug('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:', JSON.stringify(payload, null, 2));
		await this.amqp.publish('lesson_exchange', 'lesson_cancelled', payload);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${cancellationStatus}`);
		return {
			success: true,
			status: cancellationStatus,
			refundAvailable: !isWithinTwoHours,
			message: isWithinTwoHours
				? '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω. –¢–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.'
				: '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
		};
	}

	// ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –ó–ê–ù–Ø–¢–ò–ô ====================

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —É–º–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
	async getAvailableSlots(teacherId: string, date: Date): Promise<{
		time: string;
		available: boolean;
		type: 'available' | 'lesson' | 'break' | 'blocked';
		reason?: string;
		studentName?: string;
		lessonId?: string;
		interval?: {
			start: string;
			end: string;
			duration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
		};
	}[]> {
		console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId} –Ω–∞ –¥–∞—Ç—É ${date.toDateString()}`);

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
		const startOfDay = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
		const endOfDay = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);

		const bookedLessons = await this.lessonRepo.find({
			where: {
				teacherId,
				status: In(['confirmed', 'in_progress']),
				scheduledAt: Between(startOfDay, endOfDay)
			},
			order: { scheduledAt: 'ASC' }
		});

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –¥–ª—è —É—Ä–æ–∫–æ–≤
		const lessonsWithStudents = await Promise.all(
			bookedLessons.map(async (lesson) => {
				try {
					const student = await this.authClient.getUserInfo(lesson.studentId);
					return {
						...lesson,
						studentName: `${student?.name || ''} ${student?.surname || ''}`.trim() || 'Nom inconnu'
					};
				} catch (error) {
					console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer l'info √©tudiant ${lesson.studentId}:`, error);
					return {
						...lesson,
						studentName: 'Nom inconnu'
					};
				}
			})
		);

		// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å 8:00 –¥–æ 22:00
		const slots = [];
		const baseDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
		const now = new Date();

		for (let hour = 8; hour <= 21; hour++) {
			for (let minute = 0; minute < 60; minute += 30) {
				const slotTime = new Date(baseDate.getTime() + hour * 60 * 60 * 1000 + minute * 60 * 1000);

				// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–ª–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
				if (slotTime <= now) {
					continue;
				}

				const timeString = slotTime.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–ª–æ—Ç–∞
				const slotInfo = this.analyzeTimeSlot(slotTime, lessonsWithStudents);

				slots.push({
					time: timeString,
					...slotInfo
				});
			}
		}

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
		const slotsWithIntervals = this.groupAvailableSlots(slots);

		console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤:`, {
			available: slots.filter(s => s.available).length,
			lessons: slots.filter(s => s.type === 'lesson').length,
			breaks: slots.filter(s => s.type === 'break').length,
			blocked: slots.filter(s => s.type === 'blocked').length
		});

		return slotsWithIntervals;
	}

	// –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
	private analyzeTimeSlot(slotTime: Date, lessonsWithStudents: any[]): {
		available: boolean;
		type: 'available' | 'lesson' | 'break' | 'blocked';
		reason?: string;
		studentName?: string;
		lessonId?: string;
	} {
		const slotEnd = new Date(slotTime.getTime() + 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞

		for (const lesson of lessonsWithStudents) {
			const lessonStart = new Date(lesson.scheduledAt);
			const lessonEnd = new Date(lessonStart.getTime() + 60 * 60 * 1000);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ª–æ—Ç –≤ —É—Ä–æ–∫
			if (slotTime >= lessonStart && slotTime < lessonEnd) {
				return {
					available: false,
					type: 'lesson',
					reason: `Cours avec ${lesson.studentName}`,
					studentName: lesson.studentName,
					lessonId: lesson.id
				};
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ª–æ—Ç –≤ –ø–µ—Ä–µ—Ä—ã–≤ (15 –º–∏–Ω—É—Ç –¥–æ —É—Ä–æ–∫–∞)
			const breakStart = new Date(lessonStart.getTime() - 15 * 60 * 1000);
			if (slotTime >= breakStart && slotTime < lessonStart) {
				return {
					available: false,
					type: 'break',
					reason: `Pr√©paration (cours dans ${Math.round((lessonStart.getTime() - slotTime.getTime()) / (1000 * 60))} min)`
				};
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ª–æ—Ç –≤ –ø–µ—Ä–µ—Ä—ã–≤ (15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞)
			const breakEnd = new Date(lessonEnd.getTime() + 15 * 60 * 1000);
			if (slotTime >= lessonEnd && slotTime < breakEnd) {
				return {
					available: false,
					type: 'break',
					reason: `Pause (apr√®s cours avec ${lesson.studentName})`
				};
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
			if (slotTime < breakEnd && slotEnd > breakStart) {
				return {
					available: false,
					type: 'blocked',
					reason: `P√©riode bloqu√©e (cours avec ${lesson.studentName})`
				};
			}
		}

		return {
			available: true,
			type: 'available'
		};
	}

	// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
	private groupAvailableSlots(slots: any[]): any[] {
		const result = [...slots];

		// –ù–∞–π–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
		let currentInterval: { start: string; startIndex: number } | null = null;

		for (let i = 0; i < result.length; i++) {
			const slot = result[i];

			if (slot.available && slot.type === 'available') {
				// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
				if (!currentInterval) {
					currentInterval = { start: slot.time, startIndex: i };
				}
			} else {
				// –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
				if (currentInterval) {
					const duration = (i - currentInterval.startIndex) * 30; // –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç 30 –º–∏–Ω—É—Ç
					// const endTime = i > 0 ? result[i - 1].time : slot.time;

					// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∫–æ –≤—Å–µ–º —Å–ª–æ—Ç–∞–º –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
					for (let j = currentInterval.startIndex; j < i; j++) {
						result[j].interval = {
							start: currentInterval.start,
							end: this.addMinutesToTime(currentInterval.start, duration),
							duration
						};
					}

					currentInterval = null;
				}
			}
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
		if (currentInterval) {
			const duration = (result.length - currentInterval.startIndex) * 30;
			for (let j = currentInterval.startIndex; j < result.length; j++) {
				result[j].interval = {
					start: currentInterval.start,
					end: this.addMinutesToTime(currentInterval.start, duration),
					duration
				};
			}
		}

		return result;
	}

	// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω—É—Ç –∫ –≤—Ä–µ–º–µ–Ω–∏
	private addMinutesToTime(timeString: string, minutes: number): string {
		const [hours, mins] = timeString.split(':').map(Number);
		const totalMinutes = hours * 60 + mins + minutes;
		const newHours = Math.floor(totalMinutes / 60);
		const newMins = totalMinutes % 60;
		return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}`;
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
	private isSlotAvailable(slotTime: Date, bookedLessons: Lesson[]): boolean {
		const slotEnd = new Date(slotTime.getTime() + 60 * 60 * 1000); // –£—Ä–æ–∫ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å

		for (const lesson of bookedLessons) {
			const lessonStart = new Date(lesson.scheduledAt);
			const lessonEnd = new Date(lessonStart.getTime() + 60 * 60 * 1000);

			// –ë–ª–æ–∫–∏—Ä—É–µ–º 15 –º–∏–Ω—É—Ç –¥–æ –∏ –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞
			const blockStart = new Date(lessonStart.getTime() - 15 * 60 * 1000);
			const blockEnd = new Date(lessonEnd.getTime() + 15 * 60 * 1000);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
			const hasConflict = slotTime < blockEnd && slotEnd > blockStart;

			if (hasConflict) {
				return false; // –°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
			}
		}

		return true; // –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∑–∞–Ω—è—Ç–∏—è –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
	async validateLessonTime(teacherId: string, studentId: string, scheduledAt: Date, excludeLessonId?: string): Promise<void> {
		const lessonStart = new Date(scheduledAt);
		const lessonEnd = new Date(lessonStart.getTime() + 60 * 60 * 1000); // –£—Ä–æ–∫ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å

		// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ confirmed/in_progress —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
		const whereConditions = [
			{
				teacherId,
				status: In(['confirmed', 'in_progress']),
				scheduledAt: Between(
					new Date(lessonStart.getFullYear(), lessonStart.getMonth(), lessonStart.getDate()),
					new Date(lessonStart.getFullYear(), lessonStart.getMonth(), lessonStart.getDate(), 23, 59, 59)
				)
			},
			{
				studentId,
				status: In(['confirmed', 'in_progress']),
				scheduledAt: Between(
					new Date(lessonStart.getFullYear(), lessonStart.getMonth(), lessonStart.getDate()),
					new Date(lessonStart.getFullYear(), lessonStart.getMonth(), lessonStart.getDate(), 23, 59, 59)
				)
			}
		];

		const existingLessons = await this.lessonRepo.find({
			where: whereConditions
		});

		// –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
		const filteredLessons = excludeLessonId
			? existingLessons.filter(lesson => lesson.id !== excludeLessonId)
			: existingLessons;

		for (const existingLesson of filteredLessons) {
			const existingStart = new Date(existingLesson.scheduledAt);
			const existingEnd = new Date(existingStart.getTime() + 60 * 60 * 1000);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
			const isOverlapping = (lessonStart < existingEnd && lessonEnd > existingStart);

			if (isOverlapping) {
				const conflictTime = existingStart.toLocaleString('fr-FR');
				const participantName = existingLesson.teacherId === teacherId ? 'ce professeur' : 'cet √©tudiant';
				throw new Error(`‚ùå Conflit d'horaire: ${participantName} a d√©j√† un cours √† ${conflictTime}`);
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç
			const timeDiffMinutes = Math.abs(lessonStart.getTime() - existingStart.getTime()) / (1000 * 60);

			if (timeDiffMinutes < 75) { // 60 –º–∏–Ω —É—Ä–æ–∫ + 15 –º–∏–Ω –ø–µ—Ä–µ—Ä—ã–≤
				const conflictTime = existingStart.toLocaleString('fr-FR');
				const participantName = existingLesson.teacherId === teacherId ? 'ce professeur' : 'cet √©tudiant';
				throw new Error(`‚ùå Temps insuffisant: ${participantName} a un cours √† ${conflictTime}. Minimum 15 minutes de pause requis entre les cours.`);
			}
		}

		console.log('‚úÖ Validation du temps du cours r√©ussie');
	}

	// ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–î–ê–ß–ê–ú–ò, –í–û–ü–†–û–°–ê–ú–ò –ò –ù–ê–ß–ê–õ–û–ú –£–†–û–ö–ê ====================

	// –ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ
	async startLesson(lessonId: string, startedBy: string) {
		console.log(`üé¨ [START] –ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ (ID=${lessonId}, startedBy=${startedBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'confirmed') {
			throw new Error('–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —É—Ä–æ–∫ (—Å—Ç–∞—Ç—É—Å: confirmed)');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
		lesson.status = 'in_progress';
		lesson.startedAt = new Date();
		lesson.videoCallStarted = true;
		lesson.startedBy = startedBy;
		await this.lessonRepo.save(lesson);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–∞
		const isStartedByTeacher = lesson.teacherId === startedBy;
		const notificationTargetId = isStartedByTeacher ? lesson.studentId : lesson.teacherId;

		const user = await this.authClient.getUserInfo(startedBy);
		const starterName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();
		const starterRole = isStartedByTeacher ? 'professeur' : '√©tudiant';

		const payload = {
			user_id: notificationTargetId,
			title: 'Le cours a commenc√©',
			message: `Le ${starterRole} ${starterName} a commenc√© le cours.`,
			type: 'lesson_started',
			metadata: {
				lessonId: lesson.id,
				startedBy,
				starterName,
				starterRole,
				startedAt: lesson.startedAt
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'lesson_started', payload);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –Ω–∞—á–∞—Ç: ${lesson.id}`);
		return { success: true, lesson };
	}

	// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
	async endLesson(lessonId: string, endedBy: string) {
		console.log(`üèÅ [START] –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ (ID=${lessonId}, endedBy=${endedBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'in_progress') {
			throw new Error('–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
		lesson.status = 'completed';
		lesson.endedAt = new Date();
		await this.lessonRepo.save(lesson);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${lesson.id}`);
		return { success: true, lesson };
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
	async getLessonWithTasksAndQuestions(lessonId: string) {
		const lesson = await this.lessonRepo.findOne({
			where: { id: lessonId },
			relations: ['tasks', 'questions']
		});

		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏ —Å—Ç—É–¥–µ–Ω—Ç–µ
		const [teacher, student] = await Promise.all([
			this.authClient.getUserInfo(lesson.teacherId),
			this.authClient.getUserInfo(lesson.studentId)
		]);

		const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		return {
			...lesson,
			teacherName,
			studentName
		};
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫ —É—Ä–æ–∫—É
	async addTaskToLesson(lessonId: string, title: string, description: string | null, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`üìù [START] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫ —É—Ä–æ–∫—É (lessonId=${lessonId}, createdBy=${createdBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const task = this.taskRepo.create({
			lessonId,
			title,
			description,
			createdBy,
			createdByRole
		});

		const savedTask = await this.taskRepo.save(task);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
		const isCreatedByTeacher = createdByRole === 'teacher';
		const notificationTargetId = isCreatedByTeacher ? lesson.studentId : lesson.teacherId;

		const user = await this.authClient.getUserInfo(createdBy);
		const creatorName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();

		const payload = {
			user_id: notificationTargetId,
			title: 'Nouvelle t√¢che ajout√©e',
			message: `${creatorName} a ajout√© une nouvelle t√¢che: "${title}"`,
			type: 'task_added',
			metadata: {
				lessonId,
				taskId: savedTask.id,
				title,
				createdBy,
				createdByRole,
				creatorName
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'task_added', payload);

		console.log(`‚úÖ [END] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${savedTask.id}`);
		return savedTask;
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ —É—Ä–æ–∫—É
	async addQuestionToLesson(lessonId: string, question: string, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`‚ùì [START] –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ —É—Ä–æ–∫—É (lessonId=${lessonId}, createdBy=${createdBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const questionEntity = this.questionRepo.create({
			lessonId,
			question,
			createdBy,
			createdByRole
		});

		const savedQuestion = await this.questionRepo.save(questionEntity);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
		const isCreatedByTeacher = createdByRole === 'teacher';
		const notificationTargetId = isCreatedByTeacher ? lesson.studentId : lesson.teacherId;

		const user = await this.authClient.getUserInfo(createdBy);
		const creatorName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();

		const payload = {
			user_id: notificationTargetId,
			title: 'Nouvelle question ajout√©e',
			message: `${creatorName} a ajout√© une nouvelle question: "${question}"`,
			type: 'question_added',
			metadata: {
				lessonId,
				questionId: savedQuestion.id,
				question,
				createdBy,
				createdByRole,
				creatorName
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'question_added', payload);

		console.log(`‚úÖ [END] –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: ${savedQuestion.id}`);
		return savedQuestion;
	}

	// –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
	async completeTask(taskId: string, completedBy: string) {
		this.logger.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${completedBy}`);
		const task = await this.taskRepo.findOneBy({ id: taskId });
		if (!task) {
			throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
		}

		task.isCompleted = true;
		task.completedAt = new Date();
		await this.taskRepo.save(task);

		return task;
	}

	// –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
	async answerQuestion(questionId: string, answer: string, answeredBy: string) {
		this.logger.log(`‚ùì –í–æ–ø—Ä–æ—Å ${questionId} –æ—Ç–≤–µ—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${answeredBy}`);
		const question = await this.questionRepo.findOneBy({ id: questionId });
		if (!question) {
			throw new Error('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		question.answer = answer;
		question.isAnswered = true;
		question.answeredAt = new Date();
		await this.questionRepo.save(question);

		return question;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —É—Ä–æ–∫–∞
	async getTasksForLesson(lessonId: string) {
		return this.taskRepo.find({
			where: { lessonId },
			order: { createdAt: 'ASC' }
		});
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–∫–∞
	async getQuestionsForLesson(lessonId: string) {
		return this.questionRepo.find({
			where: { lessonId },
			order: { createdAt: 'ASC' }
		});
	}

	// ==================== –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–Ø–í–û–ö –°–¢–£–î–ï–ù–¢–ê ====================

	async getStudentSentRequests(studentId: string) {
		console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId}`);

		// –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
		if (!this.validateUUID(studentId)) {
			console.error(`‚ùå Invalid studentId UUID format: ${studentId}`);
			throw new Error('Invalid student ID format');
		}

		const lessons = await this.lessonRepo.find({
			where: { studentId },
			order: { createdAt: 'DESC' } // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
		});

		// –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
		const enrichedLessons = await Promise.all(
			lessons.map(async (lesson) => {
				const teacher = await this.authClient.getUserInfo(lesson.teacherId);
				const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();

				return {
					lessonId: lesson.id,
					teacherId: lesson.teacherId,
					teacherName,
					scheduledAt: lesson.scheduledAt,
					status: lesson.status,
					createdAt: lesson.createdAt,
					proposedTime: lesson.proposedTime,
					studentConfirmed: lesson.studentConfirmed,
					studentRefused: lesson.studentRefused,
					proposedByTeacherAt: lesson.proposedByTeacherAt
				};
			})
		);

		console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${enrichedLessons.length} –∑–∞—è–≤–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞`);
		return enrichedLessons;
	}

	async getStudentSentRequestsPaged(studentId: string, page = 1, limit = 10) {
		console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (paged) –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId} (page=${page}, limit=${limit})`);

		if (!this.validateUUID(studentId)) {
			console.error(`‚ùå Invalid studentId UUID format: ${studentId}`);
			throw new Error('Invalid student ID format');
		}

		const [lessons, total] = await this.lessonRepo.findAndCount({
			where: { studentId },
			order: { createdAt: 'DESC' },
			skip: (page - 1) * limit,
			take: limit,
		});

		const enrichedLessons = await Promise.all(
			lessons.map(async (lesson) => {
				const teacher = await this.authClient.getUserInfo(lesson.teacherId);
				const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
				return {
					lessonId: lesson.id,
					teacherId: lesson.teacherId,
					teacherName,
					scheduledAt: lesson.scheduledAt,
					status: lesson.status,
					createdAt: lesson.createdAt,
					proposedTime: lesson.proposedTime,
					studentConfirmed: lesson.studentConfirmed,
					studentRefused: lesson.studentRefused,
					proposedByTeacherAt: lesson.proposedByTeacherAt
				};
			})
		);

		return {
			data: enrichedLessons,
			total
		};
	}

	// ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–ú–ï–¢–ö–ê–ú–ò –£–†–û–ö–ê ====================

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —É—Ä–æ–∫–∞
	async saveLessonNotes(lessonId: string, tasksContent: string | null, questionsContent: string | null, materialsContent: string | null, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`üìù [START] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —É—Ä–æ–∫–∞ (lessonId=${lessonId})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
		let notes = await this.lessonNotesRepo.findOne({ where: { lessonId } });

		if (notes) {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
			notes.tasksContent = tasksContent;
			notes.questionsContent = questionsContent;
			notes.materialsContent = materialsContent;
			notes.updatedAt = new Date();
		} else {
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
			notes = this.lessonNotesRepo.create({
				lessonId,
				tasksContent,
				questionsContent,
				materialsContent,
				createdBy,
				createdByRole
			});
		}

		const savedNotes = await this.lessonNotesRepo.save(notes);
		console.log(`‚úÖ [END] –ó–∞–º–µ—Ç–∫–∏ —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${savedNotes.id}`);
		return savedNotes;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —É—Ä–æ–∫–∞
	async getLessonNotes(lessonId: string) {
		return this.lessonNotesRepo.findOne({ where: { lessonId } });
	}

	// ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ú–ê–®–ù–ò–ú–ò –ó–ê–î–ê–ù–ò–Ø–ú–ò ====================

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
	async addHomeworkItem(lessonId: string, title: string, description: string | null, itemType: 'task' | 'question' | 'material', originalItemId: string | null, dueDate: Date, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`üìö [START] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (lessonId=${lessonId}, type=${itemType})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const homework = this.homeworkRepo.create({
			lessonId,
			title,
			description,
			itemType,
			originalItemId,
			dueDate,
			createdBy,
			createdByRole
		});

		const savedHomework = await this.homeworkRepo.save(homework);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ –Ω–æ–≤–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
		const notificationTargetId = lesson.studentId;

		const user = await this.authClient.getUserInfo(createdBy);
		const creatorName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();

		const payload = {
			user_id: notificationTargetId,
			title: 'Nouveau devoir ajout√©',
			message: `${creatorName} vous a assign√© un nouveau devoir: "${title}"`,
			type: 'homework_assigned',
			metadata: {
				lessonId,
				homeworkId: savedHomework.id,
				title,
				itemType,
				dueDate,
				createdBy,
				createdByRole,
				creatorName
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'homework_assigned', payload);

		console.log(`‚úÖ [END] –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${savedHomework.id}`);
		return savedHomework;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–∫–∞
	async getHomeworkForLesson(lessonId: string) {
		return this.homeworkRepo.find({
			where: { lessonId },
			order: { createdAt: 'ASC' }
		});
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞
	async getHomeworkForStudent(studentId: string) {
		console.log(`üìã [SERVICE] getHomeworkForStudent –≤—ã–∑–≤–∞–Ω –¥–ª—è studentId: ${studentId}`);

		const lessons = await this.lessonRepo.find({
			where: { studentId },
			select: ['id', 'studentId', 'teacherId']
		});

		const lessonIds = lessons.map(lesson => lesson.id);

		if (lessonIds.length === 0) {
			console.log(`üìã [SERVICE] –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
			return [];
		}

		const homework = await this.homeworkRepo.find({
			where: { lessonId: In(lessonIds) },
			order: { dueDate: 'ASC' },
			relations: ['lesson']
		});

		console.log(`üìã [SERVICE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${homework.length} –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞`);
		homework.forEach(hw => {
			console.log(`üìã [SERVICE] Homework ${hw.id}:`, {
				title: hw.title,
				studentResponse: hw.studentResponse,
				studentResponseType: typeof hw.studentResponse,
				studentResponseLength: hw.studentResponse?.length,
				status: hw.status
			});
		});

		// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		const studentIds = [...new Set(lessons.map(lesson => lesson.studentId))];
		const teacherIds = [...new Set(lessons.map(lesson => lesson.teacherId))];

		try {
			// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			const allUserIds = [...new Set([...studentIds, ...teacherIds])];
			const userProfiles = await Promise.all(
				allUserIds.map(userId => this.authClient.getUserInfo(userId).catch(() => null))
			);

			// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
			const userNameMap = new Map();
			userProfiles.forEach((profile) => {
				if (profile) {
					userNameMap.set(profile.id, `${profile.name || ''} ${profile.surname || ''}`.trim());
				}
			});

			// –û–±–æ–≥–∞—â–∞–µ–º homework –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
			const enrichedHomework = homework.map(hw => {
				const lesson = lessons.find(l => l.id === hw.lessonId);
				return {
					...hw,
					assignedBy: lesson?.teacherId,
					assignedByName: userNameMap.get(lesson?.teacherId) || 'Enseignant inconnu',
					assignedTo: lesson?.studentId,
					assignedToName: userNameMap.get(lesson?.studentId) || '√âtudiant inconnu',
					assignedAt: hw.createdAt
				};
			});

			return enrichedHomework;
		} catch (error) {
			console.error('‚ùå [SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º homework –±–µ–∑ –∏–º–µ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
			return homework.map(hw => {
				const lesson = lessons.find(l => l.id === hw.lessonId);
				return {
					...hw,
					assignedBy: lesson?.teacherId,
					assignedByName: 'Enseignant',
					assignedTo: lesson?.studentId,
					assignedToName: '√âtudiant',
					assignedAt: hw.createdAt
				};
			});
		}
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	async getHomeworkForTeacher(teacherId: string) {
		console.log(`üìã [SERVICE] getHomeworkForTeacher –≤—ã–∑–≤–∞–Ω –¥–ª—è teacherId: ${teacherId}`);

		const lessons = await this.lessonRepo.find({
			where: { teacherId },
			select: ['id', 'studentId', 'teacherId']
		});

		console.log(`üìã [SERVICE] –ù–∞–π–¥–µ–Ω–æ ${lessons.length} —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId}`);
		const lessonIds = lessons.map(lesson => lesson.id);

		if (lessonIds.length === 0) {
			console.log(`üìã [SERVICE] –£ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
			return [];
		}

		const homework = await this.homeworkRepo.find({
			where: { lessonId: In(lessonIds) },
			order: { dueDate: 'ASC' },
			relations: ['lesson']
		});

		console.log(`üìã [SERVICE] –ù–∞–π–¥–µ–Ω–æ ${homework.length} –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId}`);

		// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		const studentIds = [...new Set(lessons.map(lesson => lesson.studentId))];
		const teacherIds = [...new Set(lessons.map(lesson => lesson.teacherId))];

		try {
			// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			const allUserIds = [...new Set([...studentIds, ...teacherIds])];
			const userProfiles = await Promise.all(
				allUserIds.map(userId => this.authClient.getUserInfo(userId).catch(() => null))
			);

			// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω
			const userNameMap = new Map();
			userProfiles.forEach((profile) => {
				if (profile) {
					userNameMap.set(profile.id, `${profile.name || ''} ${profile.surname || ''}`.trim());
				}
			});

			// –û–±–æ–≥–∞—â–∞–µ–º homework –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
			const enrichedHomework = homework.map(hw => {
				const lesson = lessons.find(l => l.id === hw.lessonId);
				return {
					...hw,
					assignedBy: lesson?.teacherId,
					assignedByName: userNameMap.get(lesson?.teacherId) || 'Enseignant inconnu',
					assignedTo: lesson?.studentId,
					assignedToName: userNameMap.get(lesson?.studentId) || '√âtudiant inconnu',
					assignedAt: hw.createdAt
				};
			});

			return enrichedHomework;
		} catch (error) {
			console.error('‚ùå [SERVICE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º homework –±–µ–∑ –∏–º–µ–Ω –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
			return homework.map(hw => {
				const lesson = lessons.find(l => l.id === hw.lessonId);
				return {
					...hw,
					assignedBy: lesson?.teacherId,
					assignedByName: 'Enseignant',
					assignedTo: lesson?.studentId,
					assignedToName: '√âtudiant',
					assignedAt: hw.createdAt
				};
			});
		}
	}

	// –û—Ç–º–µ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
	async completeHomework(homeworkId: string, completedBy: string) {
		this.logger.log(`üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ${homeworkId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${completedBy}`);
		const homework = await this.homeworkRepo.findOneBy({ id: homeworkId });
		if (!homework) {
			throw new Error('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
		}

		homework.status = 'finished';
		homework.isCompleted = true;
		homework.completedAt = new Date();
		await this.homeworkRepo.save(homework);

		return homework;
	}

	// –û—Ç–º–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
	async completeHomeworkItem(homeworkId: string, completedBy: string, studentResponse?: string) {
		console.log(`üìù [SERVICE] completeHomeworkItem –≤—ã–∑–≤–∞–Ω:`, {
			homeworkId,
			completedBy,
			studentResponse,
			studentResponseLength: studentResponse?.length
		});

		const homework = await this.homeworkRepo.findOneBy({ id: homeworkId });
		if (!homework) {
			throw new Error('–≠–ª–µ–º–µ–Ω—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		console.log(`üìù [SERVICE] –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:`, {
			id: homework.id,
			title: homework.title,
			currentStudentResponse: homework.studentResponse
		});

		homework.isCompleted = true;
		homework.status = 'finished';
		homework.completedAt = new Date();
		homework.submittedAt = new Date();

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
		if (studentResponse) {
			homework.studentResponse = studentResponse;
			console.log(`üìù [SERVICE] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º studentResponse:`, studentResponse);
		} else {
			console.log(`üìù [SERVICE] studentResponse –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω`);
		}

		console.log(`üìù [SERVICE] –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º homework:`, {
			id: homework.id,
			studentResponse: homework.studentResponse,
			studentResponseType: typeof homework.studentResponse,
			status: homework.status,
			isCompleted: homework.isCompleted
		});

		const savedHomework = await this.homeworkRepo.save(homework);

		console.log(`üìù [SERVICE] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è homework:`, {
			id: savedHomework.id,
			studentResponse: savedHomework.studentResponse,
			studentResponseType: typeof savedHomework.studentResponse,
			status: savedHomework.status,
			isCompleted: savedHomework.isCompleted
		});

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —á–∏—Ç–∞–µ–º –∏–∑ –ë–î –∑–∞–Ω–æ–≤–æ
		const reloadedHomework = await this.homeworkRepo.findOneBy({ id: homeworkId });
		console.log(`üìù [SERVICE] –ü–µ—Ä–µ—á–∏—Ç–∞–Ω–æ –∏–∑ –ë–î:`, {
			id: reloadedHomework?.id,
			studentResponse: reloadedHomework?.studentResponse,
			studentResponseType: typeof reloadedHomework?.studentResponse,
			status: reloadedHomework?.status,
			isCompleted: reloadedHomework?.isCompleted
		});

		// –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π, –æ—Ç–º–µ—á–∞–µ–º –∏ –µ—ë
		if (homework.originalItemId && homework.itemType === 'task') {
			const originalTask = await this.taskRepo.findOneBy({ id: homework.originalItemId });
			if (originalTask) {
				originalTask.isCompleted = true;
				originalTask.completedAt = new Date();
				await this.taskRepo.save(originalTask);
			}
		}

		return savedHomework;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–≤–∫–ª—é—á–∞—è –∑–∞–º–µ—Ç–∫–∏ –∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è)
	async getLessonWithFullDetails(lessonId: string) {
		const lesson = await this.lessonRepo.findOne({
			where: { id: lessonId },
			relations: ['tasks', 'questions']
		});

		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const [notes, homework] = await Promise.all([
			this.getLessonNotes(lessonId),
			this.getHomeworkForLesson(lessonId)
		]);

		return {
			...lesson,
			notes,
			homework
		};
	}

	// –û—Ü–µ–Ω–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
	async gradeHomeworkItem(homeworkId: string, grade: number, teacherFeedback?: string) {
		const homework = await this.homeworkRepo.findOneBy({ id: homeworkId });
		if (!homework) {
			throw new Error('–≠–ª–µ–º–µ–Ω—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		homework.grade = grade;
		if (teacherFeedback) {
			homework.teacherFeedback = teacherFeedback;
		}

		await this.homeworkRepo.save(homework);
		return homework;
	}

	async completeQuestion(questionId: string, completedBy: string) {
		this.logger.log(`‚ùì –í–æ–ø—Ä–æ—Å ${questionId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${completedBy}`);
		const question = await this.questionRepo.findOneBy({ id: questionId });
		if (!question) {
			throw new Error('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}
		question.isCompleted = true;
		question.completedAt = new Date();
		await this.questionRepo.save(question);
		return question;
	}

	// ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
	 */
	async getCompletedLessonsCount(studentId: string): Promise<number> {
		console.log(`üìä –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ${studentId}`);

		const count = await this.lessonRepo.count({
			where: {
				studentId,
				status: 'completed'
			}
		});

		console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤: ${count}`);
		return count;
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ä–æ–∫–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
	 */
	async getLessonsStats(startDate: Date, endDate: Date) {
		try {
			console.log(`üìä Getting lessons stats from ${startDate.toISOString()} to ${endDate.toISOString()}`);

			// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
			const totalLessons = await this.lessonRepo.count({
				where: {
					scheduledAt: Between(startDate, endDate)
				}
			});

			// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
			const completedLessons = await this.lessonRepo.count({
				where: {
					scheduledAt: Between(startDate, endDate),
					status: 'completed'
				}
			});

			// –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
			const cancelledLessons = await this.lessonRepo.count({
				where: {
					scheduledAt: Between(startDate, endDate),
					status: In(['cancelled_by_student', 'cancelled_by_student_no_refund'])
				}
			});

			console.log(`üìä Lessons stats: total=${totalLessons}, completed=${completedLessons}, cancelled=${cancelledLessons}`);

			return {
				totalLessons,
				completedLessons,
				cancelledLessons,
				successRate: totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0,
				period: {
					startDate: startDate.toISOString(),
					endDate: endDate.toISOString()
				}
			};
		} catch (error) {
			console.error('‚ùå Error getting lessons stats:', error);

			// Fallback to raw SQL if TypeORM fails
			try {
				const result = await this.lessonRepo.query(`
					SELECT 
						COUNT(*) as total_lessons,
						COUNT(*) FILTER (WHERE status = 'completed') as completed_lessons,
						COUNT(*) FILTER (WHERE status LIKE '%cancelled%') as cancelled_lessons
					FROM lessons 
					WHERE "scheduledAt" BETWEEN $1 AND $2
				`, [startDate, endDate]);

				const stats = result[0];
				const total = parseInt(stats.total_lessons) || 0;
				const completed = parseInt(stats.completed_lessons) || 0;
				const cancelled = parseInt(stats.cancelled_lessons) || 0;

				return {
					totalLessons: total,
					completedLessons: completed,
					cancelledLessons: cancelled,
					successRate: total > 0 ? Math.round((completed / total) * 100) : 0,
					period: {
						startDate: startDate.toISOString(),
						endDate: endDate.toISOString()
					}
				};
			} catch (sqlError) {
				console.error('‚ùå Raw SQL also failed:', sqlError);
				return {
					totalLessons: 0,
					completedLessons: 0,
					cancelledLessons: 0,
					successRate: 0
				};
			}
		}
	}

	// ==================== GROUP CLASSES METHODS ====================

	async createGroupClass(createGroupClassDto: CreateGroupClassDto): Promise<GroupClass> {
		if (!this.validateUUID(createGroupClassDto.teacherId)) {
			throw new Error('Invalid teacher ID format');
		}

		const groupClass = this.groupClassRepo.create({
			name: createGroupClassDto.name,
			level: createGroupClassDto.level,
			description: createGroupClassDto.description,
			maxStudents: createGroupClassDto.maxStudents || 10,
			teacherId: createGroupClassDto.teacherId,
			scheduledAt: new Date(createGroupClassDto.scheduledAt),
		});

		return await this.groupClassRepo.save(groupClass);
	}

	async getTeacherGroupClasses(teacherId: string): Promise<GroupClass[]> {
		if (!this.validateUUID(teacherId)) {
			throw new Error('Invalid teacher ID format');
		}

		return await this.groupClassRepo.find({
			where: { teacherId },
			relations: ['students'],
			order: { createdAt: 'DESC' }
		});
	}

	async addStudentToClass(addStudentDto: AddStudentToClassDto): Promise<GroupClassStudent> {
		console.log('üî•üî•üî• [SERVICE] addStudentToClass –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', addStudentDto);
		
		if (!this.validateUUIDs(addStudentDto.groupClassId, addStudentDto.studentId)) {
			console.log('‚ùå [SERVICE] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
			throw new Error('Invalid ID format');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∞—Å—Å
		console.log('üîç [SERVICE] –ò—â–µ–º –∫–ª–∞—Å—Å —Å ID:', addStudentDto.groupClassId);
		const groupClass = await this.groupClassRepo.findOne({
			where: { id: addStudentDto.groupClassId },
			relations: ['students']
		});

		if (!groupClass) {
			console.log('‚ùå [SERVICE] –ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
			throw new Error('Group class not found');
		}
		console.log('‚úÖ [SERVICE] –ö–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω:', groupClass.name);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
		if (groupClass.students.length >= groupClass.maxStudents) {
			throw new Error('Class is full');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–ª–∞—Å—Å–µ
		const existingStudent = await this.groupClassStudentRepo.findOne({
			where: {
				groupClassId: addStudentDto.groupClassId,
				studentId: addStudentDto.studentId,
				status: 'active'
			}
		});

		if (existingStudent) {
			throw new Error('Student already in this class');
		}

		console.log('üìù [SERVICE] –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
		const groupClassStudent = this.groupClassStudentRepo.create({
			groupClassId: addStudentDto.groupClassId,
			studentId: addStudentDto.studentId,
			studentName: addStudentDto.studentName,
			studentEmail: addStudentDto.studentEmail || null,
			status: 'active' // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'active'
		});

		console.log('üíæ [SERVICE] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', groupClassStudent);
		const savedStudent = await this.groupClassStudentRepo.save(groupClassStudent);
		console.log('‚úÖ [SERVICE] –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedStudent);
		return savedStudent;
	}

	async removeStudentFromClass(groupClassId: string, studentId: string): Promise<void> {
		this.devLog(`[LESSON SERVICE] removeStudentFromClass called with classId: ${groupClassId}, studentId: ${studentId}`);
		
		if (!this.validateUUIDs(groupClassId, studentId)) {
			this.devLog(`[LESSON SERVICE] Invalid UUID format`);
			throw new Error('Invalid ID format');
		}

		// –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∫–ª–∞—Å—Å–µ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–Ω–µ —Ç–æ–ª—å–∫–æ 'active')
		const student = await this.groupClassStudentRepo.findOne({
			where: {
				groupClassId,
				studentId
			}
		});

		this.devLog(`[LESSON SERVICE] Found student:`, student);

		if (!student) {
			this.devLog(`[LESSON SERVICE] Student not found in database, but this is OK for local-only students`);
			// –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			// –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—É–¥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
			return;
		}

		// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
		await this.groupClassStudentRepo.remove(student);
		this.devLog(`[LESSON SERVICE] Student removed from class successfully`);
	}

	async updateGroupClass(id: string, updateData: Partial<GroupClass>): Promise<GroupClass> {
		if (!this.validateUUID(id)) {
			throw new Error('Invalid class ID format');
		}

		const groupClass = await this.groupClassRepo.findOne({ where: { id } });
		if (!groupClass) {
			throw new Error('Group class not found');
		}

		Object.assign(groupClass, updateData);
		return await this.groupClassRepo.save(groupClass);
	}

	async deleteGroupClass(id: string): Promise<void> {
		if (!this.validateUUID(id)) {
			throw new Error('Invalid class ID format');
		}

		const result = await this.groupClassRepo.delete(id);
		if (result.affected === 0) {
			throw new Error('Group class not found');
		}
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ email
	 */
	async getStudentByEmail(email: string): Promise<{ success: boolean; message: string; student?: any }> {
		this.devLog(`[LESSON SERVICE] getStudentByEmail called with email: ${email}`);
		
		try {
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ auth-service
			const userInfo = await this.authClient.getUserByEmail(email);
			this.devLog(`[LESSON SERVICE] User found in auth-service:`, userInfo);
			
			if (!userInfo) {
				this.devLog(`[LESSON SERVICE] User not found for email: ${email}`);
				return {
					success: false,
					message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'
				};
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email
			if (!userInfo.is_email_confirmed) {
				this.devLog(`[LESSON SERVICE] Email not confirmed for user: ${userInfo.id}`);
				return {
					success: false,
					message: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
				};
			}

			return {
				success: true,
				message: '–°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω',
				student: {
					id: userInfo.id,
					name: userInfo.name,
					email: userInfo.email,
					is_email_confirmed: userInfo.is_email_confirmed
				}
			};

		} catch (error) {
			this.devLog(`[LESSON SERVICE] Error in getStudentByEmail:`, error);
			return {
				success: false,
				message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–∞'
			};
		}
	}

	/**
	 * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ email
	 */
	async addStudentByEmail(email: string, teacherId: string): Promise<{ success: boolean; message: string; studentId?: string; student?: any }> {
		this.devLog(`[LESSON SERVICE] addStudentByEmail called with email: ${email}, teacherId: ${teacherId}`);
		
		try {
			// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –≤ auth-service
			const userInfo = await this.authClient.getUserByEmail(email);
			this.devLog(`[LESSON SERVICE] User found in auth-service:`, userInfo);
			
			if (!userInfo) {
				this.devLog(`[LESSON SERVICE] User not found for email: ${email}`);
				return {
					success: false,
					message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω'
				};
			}

			// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email
			if (!userInfo.is_email_confirmed) {
				this.devLog(`[LESSON SERVICE] Email not confirmed for user: ${userInfo.id}`);
				return {
					success: false,
					message: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
				};
			}

			// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
			const existingLesson = await this.lessonRepo.findOne({
				where: {
					teacherId: teacherId,
					studentId: userInfo.id
				}
			});

			if (existingLesson) {
				this.devLog(`[LESSON SERVICE] Student already exists for teacher: ${teacherId}, student: ${userInfo.id}`);
				this.devLog(`[LESSON SERVICE] Existing lesson:`, existingLesson);
				return {
					success: false,
					message: '–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç—Ç–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é'
				};
			}

			// 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ lessons
			const newLesson = this.lessonRepo.create({
				teacherId: teacherId,
				studentId: userInfo.id,
				status: 'confirmed', // –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ–±—ã —Å—Ç—É–¥–µ–Ω—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
				scheduledAt: new Date(), // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ entity
				videoCallStarted: false
			});

			this.devLog(`[LESSON SERVICE] Creating new lesson:`, newLesson);
			const savedLesson = await this.lessonRepo.save(newLesson);
			this.devLog(`[LESSON SERVICE] Student added successfully to database:`, savedLesson);

			// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			const verifyLesson = await this.lessonRepo.findOne({
				where: {
					teacherId: teacherId,
					studentId: userInfo.id
				}
			});
			this.devLog(`[LESSON SERVICE] Verification - lesson found in database:`, verifyLesson);

			return {
				success: true,
				message: `–°—Ç—É–¥–µ–Ω—Ç ${userInfo.name || userInfo.email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`,
				studentId: userInfo.id,
				student: {
					id: userInfo.id,
					name: userInfo.name,
					email: userInfo.email,
					is_email_confirmed: userInfo.is_email_confirmed
				}
			};

		} catch (error) {
			this.devLog(`[LESSON SERVICE] Error adding student by email:`, error);
			return {
				success: false,
				message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: ${error.message}`
			};
		}
	}

	/**
	 * –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å (–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'invited')
	 */
	async createClassInvitation(classId: string, teacherId: string, studentId: string, message?: string): Promise<GroupClassStudent> {
		this.devLog(`[LESSON SERVICE] Creating class invitation: classId=${classId}, teacherId=${teacherId}, studentId=${studentId}`);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
		const existingRecord = await this.groupClassStudentRepo.findOne({
			where: {
				groupClassId: classId,
				studentId: studentId
			}
		});

		if (existingRecord) {
			this.devLog(`[LESSON SERVICE] Found existing record for student ${studentId} in class ${classId}, updating invitation`);
			
			// –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å –Ω–∞ 'invited'
			await this.groupClassStudentRepo.update(existingRecord.id, {
				status: 'invited',
				invitedAt: new Date(),
				invitationMessage: message,
				isRead: false
			});
			
			const updatedRecord = await this.groupClassStudentRepo.findOne({
				where: { id: existingRecord.id }
			});
			
			this.devLog(`[LESSON SERVICE] Updated existing invitation:`, updatedRecord);
			return updatedRecord;
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'invited'
		const invitation = this.groupClassStudentRepo.create({
			groupClassId: classId,
			studentId: studentId,
			status: 'invited',
			invitedAt: new Date(),
			invitationMessage: message,
			isRead: false
		});

		const savedInvitation = await this.groupClassStudentRepo.save(invitation);
		this.devLog(`[LESSON SERVICE] Class invitation created:`, savedInvitation);
		
		return savedInvitation;
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
	 */
	async getUnreadInvitationsForStudent(studentId: string): Promise<any[]> {
		this.devLog(`[LESSON SERVICE] Getting unread invitations for student: ${studentId}`);
		
		// –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'invited' –∏ invitationResponse = null (–Ω–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ)
		// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (–∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ 60 –º–∏–Ω—É—Ç)
		const now = new Date();
		const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
		
		const invitations = await this.groupClassStudentRepo.find({
			where: {
				studentId,
				status: 'invited',
				invitationResponse: null,
				invitedAt: MoreThan(oneHourAgo) // –¢–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
			},
			relations: ['groupClass'],
			order: {
				invitedAt: 'DESC'
			}
		});

		this.devLog(`[LESSON SERVICE] Found ${invitations.length} unread invitations for student ${studentId}`);
		
		// –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
		invitations.forEach((invitation, index) => {
			this.devLog(`[LESSON SERVICE] Invitation ${index + 1}: id=${invitation.id}, status=${invitation.status}, isRead=${invitation.isRead}`);
		});

		// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
		const invitationsWithTeacherNames = await Promise.all(invitations.map(async (invitation) => {
			try {
				const teacherInfo = await this.authClient.getUserInfo(invitation.groupClass.teacherId);
				this.devLog(`[LESSON SERVICE] Teacher info for ID ${invitation.groupClass.teacherId}:`, teacherInfo);
				
				return {
					...invitation,
					teacherName: teacherInfo?.name || teacherInfo?.surname || 'Professeur'
				};
			} catch (error) {
				this.devLog(`[LESSON SERVICE] Error fetching teacher info for ID ${invitation.groupClass.teacherId}:`, error);
				return {
					...invitation,
					teacherName: 'Professeur'
				};
			}
		}));

		return invitationsWithTeacherNames;
	}

	/**
	 * –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
	 */
	async markInvitationAsRead(recordId: string): Promise<void> {
		this.devLog(`[LESSON SERVICE] Marking invitation as read: ${recordId}`);
		
		await this.groupClassStudentRepo.update(recordId, {
			isRead: true
		});
	}

	/**
	 * –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å
	 */
	async acceptClassInvitation(recordId: string): Promise<GroupClassStudent> {
		this.devLog(`[LESSON SERVICE] Accepting class invitation: ${recordId}`);
		
		const record = await this.groupClassStudentRepo.findOne({
			where: { id: recordId }
		});

		if (!record) {
			throw new Error('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'accepted' –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º invitationResponse = 'confirmed'
		await this.groupClassStudentRepo.update(recordId, {
			status: 'accepted',
			invitationResponse: 'confirmed',
			isRead: true,
			respondedAt: new Date()
		});

		this.devLog(`[LESSON SERVICE] Student ${record.studentId} accepted invitation to class ${record.groupClassId}`);

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
		return await this.groupClassStudentRepo.findOne({
			where: { id: recordId },
			relations: ['groupClass']
		});
	}

	/**
	 * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å (–≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–µ —É–¥–∞–ª—è–µ–º)
	 */
	async declineClassInvitation(recordId: string): Promise<GroupClassStudent> {
		this.devLog(`[LESSON SERVICE] Temporarily declining class invitation: ${recordId}`);
		
		// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
		const currentRecord = await this.groupClassStudentRepo.findOne({
			where: { id: recordId }
		});
		
		this.devLog(`[LESSON SERVICE] Current record status: ${currentRecord?.status}`);
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º invitationResponse = 'rejected' –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
		await this.groupClassStudentRepo.update(recordId, {
			invitationResponse: 'rejected',
			isRead: true,
			respondedAt: new Date()
		});

		const updatedRecord = await this.groupClassStudentRepo.findOne({
			where: { id: recordId },
			relations: ['groupClass']
		});
		
		this.devLog(`[LESSON SERVICE] Updated record status: ${updatedRecord?.status}`);
		
		return updatedRecord;
	}

	/**
	 * –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
	 */
	async closeInvitationWithoutResponse(recordId: string): Promise<GroupClassStudent> {
		this.devLog(`[LESSON SERVICE] Closing invitation without response: ${recordId}`);
		
		// –¢–æ–ª—å–∫–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –ù–ï –º–µ–Ω—è–µ–º invitationResponse
		await this.groupClassStudentRepo.update(recordId, {
			isRead: true
		});

		return await this.groupClassStudentRepo.findOne({
			where: { id: recordId },
			relations: ['groupClass']
		});
	}

	private devLog(message: string, ...args: any[]): void {
		if (process.env.NODE_ENV !== 'production') {
			console.log(message, ...args);
		}
	}
}
