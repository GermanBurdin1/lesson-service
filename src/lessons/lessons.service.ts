import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Lesson } from './lesson.entity';
import { Task } from './task.entity';
import { Question } from './question.entity';
import { AmqpConnection } from '@golevelup/nestjs-rabbitmq';
import { AuthClient } from '../auth/auth.client';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';
import { In } from 'typeorm';

@Injectable()
export class LessonsService {
	constructor(
		@InjectRepository(Lesson)
		private lessonRepo: Repository<Lesson>,
		@InjectRepository(Task)
		private taskRepo: Repository<Task>,
		@InjectRepository(Question)
		private questionRepo: Repository<Question>,
		private readonly amqp: AmqpConnection,
		private readonly authClient: AuthClient,
		private readonly httpService: HttpService,
	) { }

	async bookLesson(studentId: string, teacherId: string, scheduledAt: Date) {
		// ==================== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í –í–†–ï–ú–ï–ù–ò ====================
		console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacherId} –Ω–∞ –≤—Ä–µ–º—è ${scheduledAt}`);
		
		// TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
		const LESSON_DURATION_MINUTES = 60; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ 60 –º–∏–Ω—É—Ç –Ω–∞ —É—Ä–æ–∫
		const BREAK_DURATION_MINUTES = 15; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ 15 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤ - TODO: —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
		
		const lessonStartTime = new Date(scheduledAt);
		const lessonEndTime = new Date(lessonStartTime.getTime() + LESSON_DURATION_MINUTES * 60000);
		const totalSlotEndTime = new Date(lessonEndTime.getTime() + BREAK_DURATION_MINUTES * 60000);
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
		const existingLessons = await this.lessonRepo.find({
			where: [
				{ teacherId, status: 'confirmed' },
				{ teacherId, status: 'in_progress' }
			]
		});
		
		for (const existingLesson of existingLessons) {
			const existingStart = new Date(existingLesson.scheduledAt);
			const existingEnd = new Date(existingStart.getTime() + LESSON_DURATION_MINUTES * 60000);
			const existingSlotEnd = new Date(existingEnd.getTime() + BREAK_DURATION_MINUTES * 60000);
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (—É—Ä–æ–∫ + –ø–µ—Ä–µ—Ä—ã–≤)
			const hasConflict = (
				(lessonStartTime >= existingStart && lessonStartTime < existingSlotEnd) ||
				(totalSlotEndTime > existingStart && totalSlotEndTime <= existingSlotEnd) ||
				(lessonStartTime <= existingStart && totalSlotEndTime >= existingSlotEnd)
			);
			
			if (hasConflict) {
				console.log(`‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å —É—Ä–æ–∫–æ–º ${existingLesson.id}`);
				console.log(`   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π: ${existingStart.toISOString()} - ${existingSlotEnd.toISOString()}`);
				console.log(`   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π: ${lessonStartTime.toISOString()} - ${totalSlotEndTime.toISOString()}`);
				throw new Error(`Ce cr√©neau n'est plus disponible. Le professeur a d√©j√† un cours de ${existingStart.toLocaleString('fr-FR')} √† ${existingSlotEnd.toLocaleString('fr-FR')}.`);
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ–¥–Ω–æ –≤—Ä–µ–º—è
		const existingStudentRequests = await this.lessonRepo.find({
			where: [
				{ studentId, scheduledAt, status: 'pending' },
				{ studentId, scheduledAt, status: 'confirmed' }
			]
		});
		
		if (existingStudentRequests.length > 0) {
			console.log(`‚ùå –°—Ç—É–¥–µ–Ω—Ç ${studentId} —É–∂–µ –∏–º–µ–µ—Ç –∑–∞—è–≤–∫—É/—É—Ä–æ–∫ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è`);
			throw new Error('Vous avez d√©j√† une demande ou un cours programm√© √† cette heure.');
		}
		
		console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
		
		// ==================== –°–û–ó–î–ê–ù–ò–ï –£–†–û–ö–ê ====================
		const lesson = this.lessonRepo.create({
			studentId,
			teacherId,
			scheduledAt,
			status: 'pending',
		});

		const savedLesson = await this.lessonRepo.save(lesson);

		// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞
		const student = await this.authClient.getUserInfo(studentId);
		const studentFullName = `${student.name ?? ''} ${student.surname ?? ''}`.trim();

		const date = scheduledAt.toLocaleDateString('fr-FR');
		const time = scheduledAt.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });

		const payload = {
			user_id: teacherId,
			title: `Nouvelle demande de r√©servation de ${studentFullName}`,
			message: `${studentFullName} souhaite r√©server un cours le ${date} √† ${time}.`,
			type: 'booking_request',
			metadata: {
				lessonId: savedLesson.id,
				studentId,
				scheduledAt,
				studentName: studentFullName,
			},
			status: 'pending',
		};

		console.log('üì§ [lesson-service] –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ lesson_created:', payload);

		// üü¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ golevelup
		await this.amqp.publish('lesson_exchange', 'lesson_created', payload);

		return savedLesson;
	}

	async respondToBooking(
		lessonId: string,
		accepted: boolean,
		reason?: string,
		proposeAlternative?: boolean,
		proposedTime?: string
	) {
		console.log(`üîî [START] R√©ponse √† la demande de le√ßon (ID=${lessonId})`);
		console.debug(`üì® Donn√©es: accepted=${accepted}, reason="${reason ?? 'N/A'}", proposeAlternative=${proposeAlternative}, proposedTime=${proposedTime}`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			console.error(`‚ùå Le√ßon introuvable: ${lessonId}`);
			throw new Error('Le√ßon introuvable');
		}

		if (proposeAlternative && proposedTime) {
			lesson.proposedByTeacherAt = new Date();
			lesson.proposedTime = new Date(proposedTime);
			lesson.status = 'pending';
			lesson.studentConfirmed = null;
			lesson.studentRefused = null;
			await this.lessonRepo.save(lesson);
			
			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			const teacher = await this.authClient.getUserInfo(lesson.teacherId);
			const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
			
			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.studentId,
				title: 'Le professeur propose un autre horaire',
				message: `Le professeur propose le ${lesson.proposedTime.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal',
				metadata: { 
					lessonId: lesson.id, 
					proposedTime: lesson.proposedTime,
					teacherId: lesson.teacherId,
					teacherName: teacherName
				},
				status: 'unread',
			});
			return { success: true, proposal: true };
		}

		lesson.status = accepted ? 'confirmed' : 'rejected';
		lesson.studentConfirmed = accepted;
		lesson.studentRefused = !accepted;
		await this.lessonRepo.save(lesson);

		// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
		try {
			console.log('[LessonService] –ò—â—É notificationId –ø–æ lessonId:', lessonId);
			const notifResp = await lastValueFrom(
				this.httpService.get(`http://localhost:3003/notifications/by-lesson/${lessonId}`)
			);
			const notification = notifResp.data;
			if (notification && notification.id) {
				console.log('[LessonService] –ù–∞–π–¥–µ–Ω notificationId:', notification.id, '‚Äî –æ–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...');
				await lastValueFrom(
					this.httpService.patch(
						`http://localhost:3003/notifications/${notification.id}`,
						{ status: accepted ? 'accepted' : 'rejected' }
					)
				);
				console.log('[LessonService] –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!');
			} else {
				console.warn('[LessonService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			}
		} catch (err) {
			console.error('[LessonService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
		}
		// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

		const teacher = await this.authClient.getUserInfo(lesson.teacherId);
		console.log('[respondToBooking] teacher from authClient:', teacher);
		const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
		console.log('[LessonsService]teacherName:', teacherName);
		const payload = {
			user_id: lesson.studentId,
			title: accepted ? 'Votre le√ßon a √©t√© confirm√©e !' : 'Votre demande a √©t√© refus√©e',
			message: accepted
				? `Le professeur a confirm√© votre le√ßon pr√©vue le ${lesson.scheduledAt.toLocaleString('fr-FR')}.`
				: `Le professeur a refus√© la le√ßon. Raison: ${reason ?? 'Non sp√©cifi√©e'}`,
			type: 'booking_response',
			metadata: {
				lessonId: lesson.id,
				teacherId: lesson.teacherId,
				teacherName,
				scheduledAt: lesson.scheduledAt,
				accepted,
			},
			status: 'unread',
		};

		console.debug('üì¶ Envoi du payload √† RabbitMQ:', JSON.stringify(payload, null, 2));
		await this.amqp.publish('lesson_exchange', 'lesson_response', payload);
		//console.log('üì§ Message publi√© sur lesson_exchange avec routingKey=lesson_response');

		return { success: true };
	}

	async studentRespondToProposal(
		lessonId: string,
		accepted: boolean,
		newSuggestedTime?: string
	) {
		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) throw new Error('Le√ßon introuvable');

		// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
		try {
			console.log('[studentRespondToProposal] –ò—â—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			const notifResp = await lastValueFrom(
				this.httpService.get(`http://localhost:3003/notifications/by-lesson/${lessonId}`)
			);
			const notification = notifResp.data;
			if (notification && notification.id) {
				console.log('[studentRespondToProposal] –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notification.id);
				// –û–±–Ω–æ–≤–ª—è–µ–º data —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å accepted/refused —Å—Ç–∞—Ç—É—Å–æ–º
				const updatedData = {
					...notification.data,
					accepted: accepted,
					refused: !accepted
				};
				await lastValueFrom(
					this.httpService.patch(
						`http://localhost:3003/notifications/${notification.id}`,
						{ 
							status: accepted ? 'accepted' : 'refused',
							data: updatedData
						}
					)
				);
				console.log('[studentRespondToProposal] –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!');
			} else {
				console.warn('[studentRespondToProposal] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è lessonId:', lessonId);
			}
		} catch (err) {
			console.error('[studentRespondToProposal] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
		}
		// --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
		const student = await this.authClient.getUserInfo(lesson.studentId);
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		if (accepted) {
			lesson.status = 'confirmed';
			lesson.studentConfirmed = true;
			lesson.studentRefused = false;
			await this.lessonRepo.save(lesson);
			
			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} a accept√© la proposition`,
				message: `${studentName} a accept√© la proposition pour le ${lesson.proposedTime?.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal_accepted',
				metadata: { 
					lessonId: lesson.id, 
					proposedTime: lesson.proposedTime,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, accepted: true };
		} else if (newSuggestedTime) {
			lesson.studentAlternativeTime = new Date(newSuggestedTime);
			lesson.studentConfirmed = false;
			lesson.studentRefused = true;
			await this.lessonRepo.save(lesson);
			
			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} propose un autre horaire`,
				message: `${studentName} propose le ${lesson.studentAlternativeTime.toLocaleString('fr-FR')}.`,
				type: 'booking_proposal_counter',
				metadata: { 
					lessonId: lesson.id, 
					proposedTime: lesson.studentAlternativeTime,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, counter: true };
		} else {
			lesson.status = 'rejected';
			lesson.studentConfirmed = false;
			lesson.studentRefused = true;
			await this.lessonRepo.save(lesson);
			
			await this.amqp.publish('lesson_exchange', 'lesson_response', {
				user_id: lesson.teacherId,
				title: `${studentName} a refus√© la proposition`,
				message: `${studentName} a refus√© la proposition.`,
				type: 'booking_proposal_refused',
				metadata: { 
					lessonId: lesson.id,
					studentId: lesson.studentId,
					studentName: studentName
				},
				status: 'unread',
			});
			return { success: true, refused: true };
		}
	}

	async getLessonsForUser(userId: string) {
		return this.lessonRepo.find({
			where: [{ teacherId: userId }, { studentId: userId }],
			order: { scheduledAt: 'ASC' }
		});
	}

	async getLessonsForStudent(studentId: string, status: 'confirmed') {
		const lessons = await this.lessonRepo.find({
			where: { studentId },
			order: { scheduledAt: 'ASC' }
		});
		console.log('[getLessonsForStudent] –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:', lessons.length, lessons);

		const withTeacherNames = await Promise.all(lessons.map(async (lesson) => {
			const teacher = await this.authClient.getUserInfo(lesson.teacherId);
			const base = {
				...lesson,
				teacherName: `${teacher.name} ${teacher.surname}`.trim(),
				teacherId: lesson.teacherId,
			};
			if (lesson.proposedTime && lesson.status === 'pending') {
				const proposal = {
					...base,
					proposedTime: lesson.proposedTime,
					studentConfirmed: lesson.studentConfirmed,
					studentRefused: lesson.studentRefused,
					isProposal: true
				};
				console.log('[getLessonsForStudent] Proposal lesson:', proposal);
				return proposal;
			}
			// console.log('[getLessonsForStudent] Regular lesson:', base);
			return base;
		}));

		if (status === 'confirmed') {
			const filtered = withTeacherNames.filter(l => l.status === 'confirmed');
			console.log('[getLessonsForStudent] –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ confirmed:', filtered);
			return filtered;
		}
		console.log('[getLessonsForStudent] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ:', withTeacherNames);
		return withTeacherNames;
	}

	async getTeachersForStudent(studentId: string): Promise<any[]> {
		//console.log('[LessonsService] getTeachersForStudent called with studentId:', studentId);
		const lessons = await this.lessonRepo.find({
			where: [
				{ studentId, status: 'confirmed' },
				{ studentId, status: 'pending' }
			],
			order: { scheduledAt: 'ASC' }
		});
		//console.log('[LessonsService] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:', lessons);
		const uniqueTeacherIds = Array.from(new Set(lessons.map(l => l.teacherId)));
		//console.log('[LessonsService] –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ teacherId:', uniqueTeacherIds);
		const teachers = await Promise.all(
			uniqueTeacherIds.map(async (teacherId) => {
				const teacher = await this.authClient.getTeacherFullProfile(teacherId);
				//console.log('[LessonsService] teacher full profile:', teacher);
				return {
					id: teacherId,
					name: `${teacher.user?.name ?? ''} ${teacher.user?.surname ?? ''}`.trim() || teacher.user?.email,
					photoUrl: teacher.photo_url || 'assets/default-avatar.png',
					specializations: teacher.specializations ?? [],
					price: teacher.price ?? 0,
					rating: teacher.rating ?? 0,
					experienceYears: teacher.experience_years ?? 0,
					reviewCount: teacher.review_count ?? 0,
					bio: teacher.bio ?? '',
					certificates: teacher.certificates ?? [],
				};
			})
		);
		//console.log('[LessonsService] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:', teachers);
		return teachers;
	}

	async getConfirmedStudentsForTeacher(teacherId: string): Promise<any[]> {
		console.log('[LESSON SERVICE] getConfirmedStudentsForTeacher called with teacherId:', teacherId);
		const lessons = await this.lessonRepo.find({
			where: { teacherId, status: 'confirmed' },
			order: { scheduledAt: 'ASC' }
		});
		const uniqueStudentIds = Array.from(new Set(lessons.map(l => l.studentId)));
		const students = await Promise.all(
			uniqueStudentIds.map(async (studentId) => {
				const student = await this.authClient.getUserInfo(studentId);
				const studentLessons = lessons.filter(l => l.studentId === studentId);
				const nextLesson = studentLessons.length > 0 ? studentLessons[0] : null;
				return {
					id: studentId,
					name: `${student.name ?? ''} ${student.surname ?? ''}`.trim(),
					photoUrl: student.photo_url || undefined,
					isStudent: true,
					nextLessonDate: nextLesson ? nextLesson.scheduledAt : null,
					// goals, homework, history, message ‚Äî –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è
				};
			})
		);
		console.log('[LESSON SERVICE] getConfirmedStudentsForTeacher result:', students);
		return students;
	}

	async getAllConfirmedLessonsForTeacher(teacherId: string) {
		const lessons = await this.lessonRepo.find({
			where: { 
				teacherId, 
				status: In(['confirmed', 'cancelled_by_student', 'cancelled_by_student_no_refund', 'in_progress', 'completed']) 
			},
			order: { scheduledAt: 'ASC' }
		});
		// –î–æ–±–∞–≤–∏–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–Ω—è—Ç–∏—é
		return Promise.all(lessons.map(async (lesson) => {
			const student = await this.authClient.getUserInfo(lesson.studentId);
			return {
				...lesson,
				studentName: `${student.name ?? ''} ${student.surname ?? ''}`.trim(),
			};
		}));
	}

	async getLessonById(lessonId: string) {
		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
		const teacher = await this.authClient.getUserInfo(lesson.teacherId);
		const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();

		return {
			...lesson,
			teacherName
		};
	}

	async cancelLessonByStudent(lessonId: string, reason: string) {
		console.log(`üö´ [START] –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º (ID=${lessonId})`);
		console.debug(`üì® –î–∞–Ω–Ω—ã–µ: reason="${reason}"`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			console.error(`‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${lessonId}`);
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'confirmed') {
			console.error(`‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${lesson.status}`);
			throw new Error('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏');
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞
		const now = new Date();
		const twoHoursBeforeLesson = new Date(lesson.scheduledAt.getTime() - 2 * 60 * 60 * 1000);
		const isWithinTwoHours = now > twoHoursBeforeLesson;

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã
		const cancellationStatus = isWithinTwoHours ? 'cancelled_by_student_no_refund' : 'cancelled_by_student';

		// –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
		lesson.status = cancellationStatus;
		lesson.cancelledAt = now;
		lesson.cancellationReason = reason;
		await this.lessonRepo.save(lesson);

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
		const student = await this.authClient.getUserInfo(lesson.studentId);
		const studentName = `${student?.name ?? ''} ${student?.surname ?? ''}`.trim();

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
		const refundText = isWithinTwoHours ? ' (pas de remboursement)' : ' (remboursement pr√©vu)';
		const payload = {
			user_id: lesson.teacherId,
			title: `${studentName} a annul√© le cours`,
			message: `${studentName} a annul√© le cours pr√©vu le ${lesson.scheduledAt.toLocaleString('fr-FR')}. Raison: ${reason}${refundText}`,
			type: 'lesson_cancelled_by_student',
			metadata: {
				lessonId: lesson.id,
				studentId: lesson.studentId,
				studentName,
				scheduledAt: lesson.scheduledAt,
				reason,
				refundAvailable: !isWithinTwoHours
			},
			status: 'unread',
		};

		console.debug('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é:', JSON.stringify(payload, null, 2));
		await this.amqp.publish('lesson_exchange', 'lesson_cancelled', payload);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${cancellationStatus}`);
		return { 
			success: true, 
			status: cancellationStatus,
			refundAvailable: !isWithinTwoHours,
			message: isWithinTwoHours 
				? '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω. –¢–∞–∫ –∫–∞–∫ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.'
				: '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.'
		};
	}

	// ==================== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ó–ê–î–ê–ß–ê–ú–ò, –í–û–ü–†–û–°–ê–ú–ò –ò –ù–ê–ß–ê–õ–û–ú –£–†–û–ö–ê ====================

	// –ù–∞—á–∞–ª–æ —É—Ä–æ–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–¥–µ–æ
	async startLesson(lessonId: string, startedBy: string) {
		console.log(`üé¨ [START] –ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫ (ID=${lessonId}, startedBy=${startedBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'confirmed') {
			throw new Error('–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —É—Ä–æ–∫');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
		lesson.status = 'in_progress';
		lesson.startedAt = new Date();
		lesson.videoCallStarted = true;
		lesson.startedBy = startedBy;
		await this.lessonRepo.save(lesson);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–∞—á–∞–ª–µ —É—Ä–æ–∫–∞
		const isStartedByTeacher = lesson.teacherId === startedBy;
		const notificationTargetId = isStartedByTeacher ? lesson.studentId : lesson.teacherId;
		
		const user = await this.authClient.getUserInfo(startedBy);
		const starterName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();
		const starterRole = isStartedByTeacher ? 'professeur' : '√©tudiant';

		const payload = {
			user_id: notificationTargetId,
			title: 'Le cours a commenc√©',
			message: `Le ${starterRole} ${starterName} a commenc√© le cours.`,
			type: 'lesson_started',
			metadata: {
				lessonId: lesson.id,
				startedBy,
				starterName,
				starterRole,
				startedAt: lesson.startedAt
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'lesson_started', payload);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –Ω–∞—á–∞—Ç: ${lesson.id}`);
		return { success: true, lesson };
	}

	// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
	async endLesson(lessonId: string, endedBy: string) {
		console.log(`üèÅ [START] –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ (ID=${lessonId}, endedBy=${endedBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		if (lesson.status !== 'in_progress') {
			throw new Error('–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞
		lesson.status = 'completed';
		lesson.endedAt = new Date();
		await this.lessonRepo.save(lesson);

		console.log(`‚úÖ [END] –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${lesson.id}`);
		return { success: true, lesson };
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
	async getLessonWithTasksAndQuestions(lessonId: string) {
		const lesson = await this.lessonRepo.findOne({
			where: { id: lessonId },
			relations: ['tasks', 'questions']
		});

		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		return lesson;
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫ —É—Ä–æ–∫—É
	async addTaskToLesson(lessonId: string, title: string, description: string | null, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`üìù [START] –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫ —É—Ä–æ–∫—É (lessonId=${lessonId}, createdBy=${createdBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const task = this.taskRepo.create({
			lessonId,
			title,
			description,
			createdBy,
			createdByRole
		});

		const savedTask = await this.taskRepo.save(task);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
		const isCreatedByTeacher = createdByRole === 'teacher';
		const notificationTargetId = isCreatedByTeacher ? lesson.studentId : lesson.teacherId;
		
		const user = await this.authClient.getUserInfo(createdBy);
		const creatorName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();

		const payload = {
			user_id: notificationTargetId,
			title: 'Nouvelle t√¢che ajout√©e',
			message: `${creatorName} a ajout√© une nouvelle t√¢che: "${title}"`,
			type: 'task_added',
			metadata: {
				lessonId,
				taskId: savedTask.id,
				title,
				createdBy,
				createdByRole,
				creatorName
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'task_added', payload);

		console.log(`‚úÖ [END] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${savedTask.id}`);
		return savedTask;
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ —É—Ä–æ–∫—É
	async addQuestionToLesson(lessonId: string, question: string, createdBy: string, createdByRole: 'student' | 'teacher') {
		console.log(`‚ùì [START] –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∫ —É—Ä–æ–∫—É (lessonId=${lessonId}, createdBy=${createdBy})`);

		const lesson = await this.lessonRepo.findOneBy({ id: lessonId });
		if (!lesson) {
			throw new Error('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		const questionEntity = this.questionRepo.create({
			lessonId,
			question,
			createdBy,
			createdByRole
		});

		const savedQuestion = await this.questionRepo.save(questionEntity);

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
		const isCreatedByTeacher = createdByRole === 'teacher';
		const notificationTargetId = isCreatedByTeacher ? lesson.studentId : lesson.teacherId;
		
		const user = await this.authClient.getUserInfo(createdBy);
		const creatorName = `${user?.name ?? ''} ${user?.surname ?? ''}`.trim();

		const payload = {
			user_id: notificationTargetId,
			title: 'Nouvelle question ajout√©e',
			message: `${creatorName} a ajout√© une nouvelle question: "${question}"`,
			type: 'question_added',
			metadata: {
				lessonId,
				questionId: savedQuestion.id,
				question,
				createdBy,
				createdByRole,
				creatorName
			},
			status: 'unread',
		};

		await this.amqp.publish('lesson_exchange', 'question_added', payload);

		console.log(`‚úÖ [END] –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: ${savedQuestion.id}`);
		return savedQuestion;
	}

	// –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
	async completeTask(taskId: string, completedBy: string) {
		const task = await this.taskRepo.findOneBy({ id: taskId });
		if (!task) {
			throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
		}

		task.isCompleted = true;
		task.completedAt = new Date();
		await this.taskRepo.save(task);

		return task;
	}

	// –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
	async answerQuestion(questionId: string, answer: string, answeredBy: string) {
		const question = await this.questionRepo.findOneBy({ id: questionId });
		if (!question) {
			throw new Error('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
		}

		question.answer = answer;
		question.isAnswered = true;
		question.answeredAt = new Date();
		await this.questionRepo.save(question);

		return question;
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —É—Ä–æ–∫–∞
	async getTasksForLesson(lessonId: string) {
		return this.taskRepo.find({
			where: { lessonId },
			order: { createdAt: 'ASC' }
		});
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–∫–∞
	async getQuestionsForLesson(lessonId: string) {
		return this.questionRepo.find({
			where: { lessonId },
			order: { createdAt: 'ASC' }
		});
	}

	// ==================== –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ó–ê–Ø–í–û–ö –°–¢–£–î–ï–ù–¢–ê ====================
	
	async getStudentSentRequests(studentId: string) {
		console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId}`);
		
		const lessons = await this.lessonRepo.find({
			where: { studentId },
			order: { createdAt: 'DESC' } // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
		});
		
		// –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
		const enrichedLessons = await Promise.all(
			lessons.map(async (lesson) => {
				const teacher = await this.authClient.getUserInfo(lesson.teacherId);
				const teacherName = `${teacher?.name ?? ''} ${teacher?.surname ?? ''}`.trim();
				
				return {
					lessonId: lesson.id,
					teacherId: lesson.teacherId,
					teacherName,
					scheduledAt: lesson.scheduledAt,
					status: lesson.status,
					createdAt: lesson.createdAt,
					proposedTime: lesson.proposedTime,
					studentConfirmed: lesson.studentConfirmed,
					studentRefused: lesson.studentRefused,
					proposedByTeacherAt: lesson.proposedByTeacherAt
				};
			})
		);
		
		console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${enrichedLessons.length} –∑–∞—è–≤–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞`);
		return enrichedLessons;
	}

}
